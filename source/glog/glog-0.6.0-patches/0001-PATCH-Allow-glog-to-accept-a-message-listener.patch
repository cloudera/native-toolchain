From 9f2127136ede24862194347ac77b83c11212fd8d Mon Sep 17 00:00:00 2001
From: Daniel Becker <dbecker@apache.org>
Date: Sat, 10 May 2025 13:34:53 +0200
Subject: [PATCH] [PATCH] Allow glog to accept a message listener

---
 src/glog/logging.h.in    | 16 ++++++++++++++++
 src/logging.cc           | 22 ++++++++++++++++++++++
 src/logging_unittest.cc  | 19 +++++++++++++++++++
 src/logging_unittest.out |  4 ++++
 4 files changed, 61 insertions(+)

diff --git a/src/glog/logging.h.in b/src/glog/logging.h.in
index 95a573b..40e2eb9 100644
--- a/src/glog/logging.h.in
+++ b/src/glog/logging.h.in
@@ -646,6 +646,14 @@ GLOG_EXPORT void EnableLogCleaner(unsigned int overdue_days);
 GLOG_EXPORT void DisableLogCleaner();
 GLOG_EXPORT void SetApplicationFingerprint(const std::string& fingerprint);
 
+// Install a function which will be called before logging a message so that
+// the message may be modified before logging. If the function changes the
+// message, the changed flag should be set to true. The installed function
+// must be thread-safe. Calling this function to install the listener is not
+// thread-safe and should be done before creating log messages.
+GLOG_EXPORT void InstallLogMessageListenerFunction(
+    void (*listener_func)(std::string* message, bool* changed));
+
 class LogSink;  // defined below
 
 // If a non-NULL sink pointer is given, we push this message to that sink.
@@ -1447,6 +1455,10 @@ class GLOG_EXPORT LogStreamBuf : public std::streambuf {
   // Legacy public ostrstream method.
   size_t pcount() const { return static_cast<size_t>(pptr() - pbase()); }
   char* pbase() const { return std::streambuf::pbase(); }
+
+  void Reset(char* buf, int len) {
+    setp(buf, buf + len - 2);
+  }
 };
 
 }  // namespace base_logging
@@ -1498,6 +1510,10 @@ GLOG_MSVC_POP_WARNING()
     char* pbase() const { return streambuf_.pbase(); }
     char* str() const { return pbase(); }
 
+    void Reset(char* buf, int len) {
+      streambuf_.Reset(buf, len);
+    }
+
   private:
     LogStream(const LogStream&);
     LogStream& operator=(const LogStream&);
diff --git a/src/logging.cc b/src/logging.cc
index 4028ccc..991d6a5 100644
--- a/src/logging.cc
+++ b/src/logging.cc
@@ -1743,6 +1743,12 @@ ostream& LogMessage::stream() {
   return data_->stream_;
 }
 
+void (*g_log_message_listener_func)(string*, bool*) = nullptr;
+
+void InstallLogMessageListenerFunction(void (*listener_func)(string*, bool*)) {
+  g_log_message_listener_func = listener_func;
+}
+
 // Flush buffered message, called by the destructor, or any other function
 // that needs to synchronize the log.
 void LogMessage::Flush() {
@@ -1750,6 +1756,22 @@ void LogMessage::Flush() {
     return;
   }
 
+  if (g_log_message_listener_func != nullptr) {
+    // Only pass the user provided part of the message and not the file name, severity,
+    // time, etc.
+    string prefix(data_->stream_.str(), data_->num_prefix_chars_);
+    string message(data_->stream_.str() + data_->num_prefix_chars_,
+        data_->stream_.pcount() - data_->num_prefix_chars_);
+    bool changed = false;
+    g_log_message_listener_func(&message, &changed);
+    if (changed) {
+      // LogStreamBuf doesn't support seekp(), so to rewrite the message we reset the
+      // whole buffer and relog it from the start.
+      data_->stream_.Reset(data_->message_text_, LogMessage::kMaxLogMessageLen + 1);
+      stream() << prefix << message;
+    }
+  }
+
   data_->num_chars_to_log_ = data_->stream_.pcount();
   data_->num_chars_to_syslog_ =
     data_->num_chars_to_log_ - data_->num_prefix_chars_;
diff --git a/src/logging_unittest.cc b/src/logging_unittest.cc
index 728b5fe..a203b9d 100644
--- a/src/logging_unittest.cc
+++ b/src/logging_unittest.cc
@@ -98,6 +98,7 @@ static void TestLogging(bool check_counts);
 static void TestRawLogging();
 static void LogWithLevels(int v, int severity, bool err, bool alsoerr);
 static void TestLoggingLevels();
+static void TestMessageListener();
 static void TestVLogModule();
 static void TestLogString();
 static void TestLogSink();
@@ -247,6 +248,7 @@ int main(int argc, char **argv) {
   CaptureTestStdout();
   TestRawLogging();
   TestLoggingLevels();
+  TestMessageListener();
   TestLogString();
   TestLogSink();
   TestLogToString();
@@ -476,6 +478,23 @@ void TestLoggingLevels() {
   LogWithLevels(1, GLOG_FATAL, false, true);
 }
 
+void MessageListener(string* message, bool* changed) {
+  if (*message == "Change me") {
+    *message = "Changed";
+    *changed = true;
+  }
+}
+
+void TestMessageListener() {
+ fprintf(stderr, "==== Test message listener\n");
+ LOG(INFO) << "Message listener";
+ InstallLogMessageListenerFunction(MessageListener);
+ LOG(INFO) << "Unchanged";
+ LOG(INFO) << "Change me";
+ InstallLogMessageListenerFunction(NULL);
+ LOG(INFO) << "Change me";  // Won't actually change
+}
+
 int TestVlogHelper() {
   if (VLOG_IS_ON(1)) {
     return 1;
diff --git a/src/logging_unittest.out b/src/logging_unittest.out
index 18795e1..4c2edc9 100644
--- a/src/logging_unittest.out
+++ b/src/logging_unittest.out
@@ -108,6 +108,10 @@ EYEARDATE TIME__ THREADID logging_unittest.cc:LINE] log_if error expr
 IYEARDATE TIME__ THREADID logging_unittest.cc:LINE] log_if info every 1 expr
 EYEARDATE TIME__ THREADID logging_unittest.cc:LINE] log_if error every 1 expr
 IYEARDATE TIME__ THREADID logging_unittest.cc:LINE] vlog_if 0 every 1 expr
+IYEARDATE TIME__ THREADID logging_unittest.cc:LINE] Message listener
+IYEARDATE TIME__ THREADID logging_unittest.cc:LINE] Unchanged
+IYEARDATE TIME__ THREADID logging_unittest.cc:LINE] Changed
+IYEARDATE TIME__ THREADID logging_unittest.cc:LINE] Change me
 IYEARDATE TIME__ THREADID logging_unittest.cc:LINE] LOG_STRING: reported info
 WYEARDATE TIME__ THREADID logging_unittest.cc:LINE] LOG_STRING: reported warning
 EYEARDATE TIME__ THREADID logging_unittest.cc:LINE] LOG_STRING: reported error
-- 
2.34.1

